<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simon’s Blog</title>
    <description>Jekyll Theme Demo
</description>
    <link>http://sigreen.github.io/</link>
    <atom:link href="http://sigreen.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 25 Oct 2016 09:57:07 -0400</pubDate>
    <lastBuildDate>Tue, 25 Oct 2016 09:57:07 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Tackling AS2 with JBoss Fuse</title>
        <description>&lt;p&gt;AS2, or Applicability Statement 2, is a specification which customers ask me about from time-to-time.  It’s a protocol I’ve implemented in the past using both homegrown and proprietary EAI suite applications, and I was always impressed with the efficiency and ability of AS2 to implement guaranteed message delivery between B2B Trading Partner applications.  It’s also nice that a calling application can request an Acknowledgement when sending a message, plus the option of encrypting the message and/or channel, and signing of the message for non-repudiation and authentication.&lt;/p&gt;

&lt;p&gt;Essentially, AS2 is nothing more than an S/MIME message (or email) exchanged over HTTP(S).  Sounds simple enough, but the underlying specification is where the real meat is.  Let’s start with taking a look at a synchronous “fire and forget” AS2 message without a request for an Acknowledgement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;AS2-Version:1.1
AS2-From:ABCCorp1
AS2-To:DEFCorp2
Date:Mon, 01 Oct 2007 12:39:55 CEST
Message-ID:&amp;lt;-61ce18ba:1155b26911a:-8000&amp;gt;
Subject:AS2 Message
X-VerifiedContentMIC:1234,sha1
disposition-notification-to: ABCCorp1
disposition-notification-options:signed-receipt-protocol=optional, pkcs7-signature;signed-receipt-micalg=optional, sha1
Content-Type:multipart/signed; protocol=&quot;application/pkcs7-signature&quot;; micalg=sha1; boundary=&quot;----=_Part_0_1534588573.1191235195391&quot;
User-Agent:Jakarta Commons-HttpClient/3.0.1
Host:10.53.1.46:10080
Content-Length:12121
URI:/b2b/as2/syncmdn


------=_Part_0_1534588573.1191235195391
Content-Type: text/plain; charset=ISO-8859-1; name=payload.txt
Content-Transfer-Encoding: binary
Content-Disposition: attachment; filename=payload.txt

111111111
111111111
111111111
111111111

------=_Part_0_1534588573.1191235195391
Content-Type: application/pkcs7-signature; name=smime.p7s; smime-type=signed-data
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=&quot;smime.p7s&quot;
Content-Description: S/MIME Cryptographic Signature

D58aXhcU3LF8EV8zg2ExggGTMIIBjwIBATBXME8xCzAJBgNVBAYTAkVTMRIwEAYDVQQKEwlQYXJ0
MDcxMDAxMTAzOTU1WjAjBgkqhkiG9w0BCQQxFgQUXjgKuDVTY32GmtdMoZipz9K+DnIwNAYJKoZI
hvcNAQkPMScwJTAKBggqhkiG9w0DBzAOBggqhkiG9w0DAgICAIAwBwYFKw4DAgcwDQYJKoZIhvcN
AQEBBQAEgYAz0qQekvfMDlbzzQJKCLkro6+70cvD8YQIftXU/v/x2xkK8HmtU7/TyMB1QH3+jQwl
paFeRrpZmuhP/HNagVoSwb7LIWBu8WvPuisLThRcsWnt6HdE0ZYltkjlSU2hsN/RSqfU+BuGSL1k
lmcA8AjzEGq7eioMKMh3SRbhJZpSQAAAAAAAAA==
------=_Part_0_1534588573.1191235195391--

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above message is really nothing more than an HTTP request message.  You’ll notice the HTTP headers contain a few specific AS2 properties, the HTTP body in this case is unencrypted and there is a SHA1 digital signature to sign the unencrypted message.  This scenario works great when you have an external B2B trading partner who needs to forward a notification message and doesn’t expect a reply.  But what about guaranteed message delivery?  What if the sending B2B partner would like to know when the message is received and processed by the receiving system?  In this case, we introduce something called “Message Disposition Notification” or MDN.  An MDN is just a wordy acknowledgement.  We can request an MDN by specifying a “reply-to” address and “disposition-notification-options” like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/as2_async.png&quot; alt=&quot;Async AS2 Message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have a way of (a)synchronously exchanging messages between Trading Partners, whilst guaranteeing message delivery without the need for a centralized broker.  A sending Trading Partner has confirmation their message has been received, valid and processed via an MDN transmission.  Take a look at the below synchronous reply:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/as2_sync_invalid.png&quot; alt=&quot;Sync MDN Message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll notice an X-VerificationFailure:true header indicating the exchange could not be verified (probably because it cannot be authenticated).  This is great news as the receiving AS2 server can verify the digital signature immediately using a Hardware Security Module (HSM) for realtime performance, without forwarding the “dodgy” message to the backend system.  So effectively acting as a proxy.&lt;/p&gt;

&lt;p&gt;Here’s an example asynchronous MDN message :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/as2_mdn_async.png&quot; alt=&quot;Async MDN Message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This MDN originates from the backend receiving system, telling the sender there was a problem during the processing of the message.  But this is not a problem with the AS2 exchange - this was a problem with the business payload itself.  Therefore, we now have guaranteed message delivery and status of business payload processing.&lt;/p&gt;

&lt;p&gt;So there’s the semantics out of the way, what about Fuse?  And what is so difficult about building this out using a fluent API like Camel with EIP building blocks?  Let’s look a little closer at what’s required here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An HTTP server&lt;/li&gt;
  &lt;li&gt;A repository to store digital keys + certs (JKS or HSM)&lt;/li&gt;
  &lt;li&gt;A repository to store the state of AS2 exchanges (for duplicate checking and auditing)&lt;/li&gt;
  &lt;li&gt;A repository to store Trading Partner credentials (XML file or Database)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Life would be easier if there was a Camel component to kickstart the AS2 flow, but unfortunately there isn’t.  So let’s look at what options we have:&lt;/p&gt;

&lt;h3 id=&quot;openas2httpssourceforgenetprojectsopenas2&quot;&gt;&lt;a href=&quot;https://sourceforge.net/projects/openas2/&quot;&gt;OpenAS2&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;OpenAS2 is a java-based AS2 implementation. It is intended to be used as a server, configurable and supports a wide variety of signing and encryption algorithms.  Features of OpenAS2 include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Conforms with AS2 1.1 protocol&lt;/li&gt;
  &lt;li&gt;Can run as a server daemon&lt;/li&gt;
  &lt;li&gt;Support for remote control&lt;/li&gt;
  &lt;li&gt;Configurable Signature and encryption&lt;/li&gt;
  &lt;li&gt;Supports compression&lt;/li&gt;
  &lt;li&gt;Configurable Synchronous and Asynchronous MDN&lt;/li&gt;
  &lt;li&gt;Supports HTTPS transport protocol&lt;/li&gt;
  &lt;li&gt;Supports filename preservation&lt;/li&gt;
  &lt;li&gt;Supports FDA Automatic Submissions Gateway using custom headers&lt;/li&gt;
  &lt;li&gt;Supports easy extending and adding of new modules via XML configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Projects like OpenAS2 are great news, as they’re portable to Java-based applications like JBoss Fuse.  There are some challenges we need to overcome though, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No support for OSGi containers&lt;/li&gt;
  &lt;li&gt;Trading Partner information (credentials, keys, certs) are all managed via a large XML file.  Not ideal if you have hundreds or even thousands of Trading Partner credentials to maintain&lt;/li&gt;
  &lt;li&gt;Inflexible database support - H2 only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpenAS2 is great start for what we’re trying to achieve, but we need to look further afield.&lt;/p&gt;

&lt;h3 id=&quot;as2-serverhttpsgithubcomphaxas2-server&quot;&gt;&lt;a href=&quot;https://github.com/phax/as2-server&quot;&gt;as2-server&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Luckily, there’s another project which further extends OpenAS2.  It’s called as2-server / as2-lib and can be found &lt;a href=&quot;https://github.com/phax/as2-server&quot;&gt;here&lt;/a&gt;.  The advantage of this project is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maven support&lt;/li&gt;
  &lt;li&gt;Some OSGi support&lt;/li&gt;
  &lt;li&gt;Replaces H2 database with MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This project could easily be ported to run in Karaf, and potentially extended to offer Trading Partner profile storage on Mongo or some other relational database.  Hopefully in the future we might see a Camel component appear that takes all the goodness from these projects and provides a flexible, extensible and maintainable AS2 solution that we can use in the field.&lt;/p&gt;

</description>
        <pubDate>Thu, 13 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://sigreen.github.io/2016/10/13/as2-fuse.html</link>
        <guid isPermaLink="true">http://sigreen.github.io/2016/10/13/as2-fuse.html</guid>
        
        
      </item>
    
      <item>
        <title>Secure Financial Messaging with JBoss Fuse &amp; A-MQ</title>
        <description>&lt;p&gt;Exchanging financial messages securely within an organization is challenging.  Although financial back office systems often lie within a trusted zone, we cannot be complacent about message security - especially if we’re sending instructions to move potentially large amounts of money.  But there are many ways we can tackle securing messaging within the back office environment.  Using a message broker like ActiveMQ is a good start, since it provides asynchronous, guaranteed and secure message delivery whilst eliminating data at rest.  But is this enough to prevent our sensitive messages being compromised?&lt;/p&gt;

&lt;p&gt;Let’s have a closer look at the typical types of messages that are exchanged by financial institutions.  Here is a sample message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;{1:F01ABCBUAU0XXXX0000000000}{2:I103DEFHUS33XXXXN}{4:
:20:TEST1
:23B:CRED
:32A:131231USD111111111111,11
:50K:/0123456789012345678901234567890123
Joe Blogs
7 Times Square
Level 45
New York NY 10036 USA
:59:/0123456789012345678901234567890123
John Smith
123 Times Square
New York NY 10036
United States of America
:70:Wire transfer for services rendered
:71A:OUR
-}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above message is a payment instruction to move money from Joe Blogs account to John Smith’s account.  The sensitive data we want to protect is primarily the account numbers and beneficiary details.  But lets take a step back for a moment and consider some other issues with this message.  They include&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Proprietary format&lt;/li&gt;
  &lt;li&gt;The message standard changes annually&lt;/li&gt;
  &lt;li&gt;Domain specific&lt;/li&gt;
  &lt;li&gt;Contains complex business rules&lt;/li&gt;
  &lt;li&gt;The data is non-descriptive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how can we solve these problems and why do we care when we’re talking message security?  The answer is many fold:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Our priority to protect message integrity.  We can’t have a hacker changing account numbers and beneficiary details.&lt;/li&gt;
  &lt;li&gt;Do we care if a hacker sees this information while it’s being transferred?  Probably not…&lt;/li&gt;
  &lt;li&gt;We need somewhere to store a digital signature - some kind of hash of the payload based on a shared secret. This ensures integrity of the message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The way we solve some of these problems is by using a classic Enterprise Integration Pattern (EIP) - the Canonical Data Model.  Basically, a common (and open) language that we define and control to speak system to system.  Here is how I would share the above message with internal systems in my organization:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-XML&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!-- Version 1.0 --&amp;gt;
&amp;lt;paymentInstructionMessage xmlns=&quot;http://ABCBank.Gateway.Contract/paymentInstructionMessage/v1.0&quot;
		xmlns:ns0=&quot;http://ABCBank.Gateway.Contract/header/v1.0&quot; 
		xmlns:ns1=&quot;http://ABCBank.Gateway.Contract/paymentInstruction/v1.0&quot; 
		xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
		xsi:schemaLocation=&quot;http://ABCBank.Gateway.Contract/paymentInstructionMessage/v1.0 paymentInstructionMessage.xsd&quot;&amp;gt;
	&amp;lt;header&amp;gt;
		&amp;lt;ns0:serviceVersion&amp;gt;v11.11&amp;lt;/ns0:serviceVersion&amp;gt;
		&amp;lt;ns0:environment&amp;gt;dev&amp;lt;/ns0:environment&amp;gt;
		&amp;lt;ns0:transactionID&amp;gt;1234&amp;lt;/ns0:transactionID&amp;gt;
		&amp;lt;ns0:messageCreationDateTime&amp;gt;2001-12-17T09:30:47Z&amp;lt;/ns0:messageCreationDateTime&amp;gt;
		&amp;lt;ns0:priority&amp;gt;Normal&amp;lt;/ns0:priority&amp;gt;
		&amp;lt;ns0:possibleDuplicate&amp;gt;T&amp;lt;/ns0:possibleDuplicate&amp;gt;
		&amp;lt;ns0:sendingSystemComponent&amp;gt;SAA&amp;lt;/ns0:sendingSystemComponent&amp;gt;
		&amp;lt;ns0:destinationSystemComponent&amp;gt;APOLLO&amp;lt;/ns0:destinationSystemComponent&amp;gt;
	&amp;lt;/header&amp;gt;
	&amp;lt;paymentInstruction&amp;gt;
		&amp;lt;ns1:DestinationBIC&amp;gt;DEFHUS33XXX&amp;lt;/ns1:DestinationBIC&amp;gt;
		&amp;lt;ns1:MessageReferenceNumber&amp;gt;TEST1&amp;lt;/ns1:MessageReferenceNumber&amp;gt;
		&amp;lt;ns1:ValueDate&amp;gt;131231&amp;lt;/ns1:ValueDate&amp;gt;
		&amp;lt;ns1:CurrencyCode&amp;gt;USD&amp;lt;/ns1:CurrencyCode&amp;gt;
		&amp;lt;ns1:Amount&amp;gt;111111111111,11&amp;lt;/ns1:Amount&amp;gt;
		&amp;lt;ns1:OrderingCustomerAccount&amp;gt;0123456789012345678901234567890123&amp;lt;/ns1:OrderingCustomerAccount&amp;gt;
		&amp;lt;ns1:OrderingCustomerName&amp;gt;Joe Blogs&amp;lt;/ns1:OrderingCustomerName&amp;gt;
		&amp;lt;ns1:OrderingCustomerAddress1&amp;gt;7 Times Square&amp;lt;/ns1:OrderingCustomerAddress1&amp;gt;
		&amp;lt;ns1:OrderingCustomerAddress2&amp;gt;Level 45&amp;lt;/ns1:OrderingCustomerAddress2&amp;gt;
		&amp;lt;ns1:OrderingCustomerAddress3&amp;gt;New York NY 10036 USA&amp;lt;/ns1:OrderingCustomerAddress3&amp;gt;
		&amp;lt;ns1:IntermediaryInstitution&amp;gt;&amp;lt;/ns1:IntermediaryInstitution&amp;gt;
		&amp;lt;ns1:IntermediaryInstitutionLocalClearingSystem&amp;gt;&amp;lt;/ns1:IntermediaryInstitutionLocalClearingSystem&amp;gt;
		&amp;lt;ns1:IntermediaryInstitutionName&amp;gt;&amp;lt;/ns1:IntermediaryInstitutionName&amp;gt;
		&amp;lt;ns1:AccountWithInstitution&amp;gt;&amp;lt;/ns1:AccountWithInstitution&amp;gt;
		&amp;lt;ns1:AccountWithInstitutionLocalClearingSystem&amp;gt;&amp;lt;/ns1:AccountWithInstitutionLocalClearingSystem&amp;gt;
		&amp;lt;ns1:AccountWithInstitutionName&amp;gt;&amp;lt;/ns1:AccountWithInstitutionName&amp;gt;
		&amp;lt;ns1:BeneficiaryCustomerAccount&amp;gt;0123456789012345678901234567890123&amp;lt;/ns1:BeneficiaryCustomerAccount&amp;gt;
		&amp;lt;ns1:BeneficiaryCustomerName&amp;gt;John Smith&amp;lt;/ns1:BeneficiaryCustomerName&amp;gt;
		&amp;lt;ns1:BeneficiaryCustomerAddress1&amp;gt;123 Times Square&amp;lt;/ns1:BeneficiaryCustomerAddress1&amp;gt;
		&amp;lt;ns1:BeneficiaryCustomerAddress2&amp;gt;New York NY 10036&amp;lt;/ns1:BeneficiaryCustomerAddress2&amp;gt;
		&amp;lt;ns1:BeneficiaryCustomerAddress3&amp;gt;United States of America&amp;lt;/ns1:BeneficiaryCustomerAddress3&amp;gt;
		&amp;lt;ns1:RemittanceInformation&amp;gt;Wire transfer for services rendered&amp;lt;/ns1:RemittanceInformation&amp;gt;
		&amp;lt;ns1:DetailofCharges&amp;gt;OUR&amp;lt;/ns1:DetailofCharges&amp;gt;
	&amp;lt;/paymentInstruction&amp;gt;
&amp;lt;/paymentInstructionMessage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The beauty behind the above structure is that it’s:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Self describing&lt;/li&gt;
  &lt;li&gt;Human readable&lt;/li&gt;
  &lt;li&gt;Generic structure&lt;/li&gt;
  &lt;li&gt;Open&lt;/li&gt;
  &lt;li&gt;Can easily be validated against an XSD&lt;/li&gt;
  &lt;li&gt;Separates business data from system metadata (contained in the header block)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But how does this improve message security? The fact is it doesn’t by itself, but it does give us a platform to add a Digital Signature or transform into a more RESTful structure like JSON.  This is how we solve the message integrity issue - protecting account numbers and beneficiary details from modification during transmission.&lt;/p&gt;

&lt;p&gt;Lets talk some more about the Digital Signature.  The easiest way to achieve this is using a hash algorithm.  The one I like to use the HMAC-SHA256 (described &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;here&lt;/a&gt;).  By using a shared secret (password) between your app and back office system, we can generate a hash and include it either as a JMS property, HTTP header or as part of an S/MIME message.  The code we use looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;/**
 * Calculate the LAU (digital signature)
 * 
 * @param payload the raw payload (in bytes)
 * @return the LAU signature
 * @throws Exception
 */
private byte[] calculateLAU(byte[] payload) throws Exception {
    Mac m = Mac.getInstance(&quot;HmacSHA256&quot;);

    // initialize key with shared secret from SAA
    SecretKeySpec keyspec = new SecretKeySpec(this.hmacKey.getBytes(Charset.forName(&quot;US-ASCII&quot;)), &quot;HmacSHA256&quot;);
    m.init(keyspec);
    
    // calculate the LAU
    byte[] lau = m.doFinal(payload);
    byte[] lau_to_encode = new byte[16];
    
     System.arraycopy(lau, 0, lau_to_encode, 0, 16);
     LOGGER.info(&quot;LAU value is: [&quot; + Base64.encodeBase64String(lau_to_encode) + &quot;]&quot;);
     return Base64.encodeBase64(lau_to_encode);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To preserve whitespace and CRLF, we base64 encode the payload before generating the hash, adding it to the JMS properties and transmitting it.  When the receiving system receives the JMS message, it must first generate a hash based on the base64 encoded payload and match that with the Digital Signature JMS property.  If the generated hash doesn’t match the JMS property, we know our message has been tampered with and must be discarded.&lt;/p&gt;

&lt;p&gt;But lets step back from the weeds and take a 30,000 foot view of our flow using the EIP lexicon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/eip_flow_end_to_end.png&quot; alt=&quot;EIP End to End Flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To achieve a secure channel between our back office and (proprietary) messaging gateway, we have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A-MQ providing Guaranteed Delivery, eliminating data at rest and providing asynchronous “fire and forget” messaging&lt;/li&gt;
  &lt;li&gt;The Fuse JMS client providing a Messaging Gateway&lt;/li&gt;
  &lt;li&gt;Using our Digital Signature and Canonical Data Model above, we have an implementation of the Envelope Wrapper EIP&lt;/li&gt;
  &lt;li&gt;Using a message transformer, we can transform the message to/from our Canonical Data Model to the proprietary message format accepted by the Messaging Gateway&lt;/li&gt;
  &lt;li&gt;The Channel Adapter step takes care of preparing the message to be sent / received over the external Messaging Gateway&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll notice I haven’t mentioned SSL once during this article.  That’s because it’s not really required for what we’re trying to ultimately achieve: guaranteeing message integrity.  SSL gives us authentication, authorization and an encrypted channel but it doesn’t provide us with a means to guarantee message integrity, therefore unless your organization mandates all back office communication channels must use SSL, I wouldn’t bother given the effort to administer and manage certificates for each system.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 May 2016 00:00:00 -0400</pubDate>
        <link>http://sigreen.github.io/2016/05/24/message-channel-security.html</link>
        <guid isPermaLink="true">http://sigreen.github.io/2016/05/24/message-channel-security.html</guid>
        
        
      </item>
    
      <item>
        <title>JBoss A-MQ 6.2 Performance Tuning Adventures</title>
        <description>&lt;p&gt;2008 was the last time I embarked on a similar exercise, so I was a little rusty at tuning high-performance applications. But it was refreshing to revisit the process again with JBoss A-MQ.  I recently had a customer who presented a performance issue with an unusual use case: “Publish only to a composite topic (forwarding from topics to queues) with no subscribers, no use of transactions and must have JMS durability“.  I quizzed the customer whether this was a valid real-word use case and they assured me it was.  They explained they have many applications publishing notification messages to topics which may (or may not) have any subscribers, and it was likely the topic could get backed up with millions of messages at a time.  Their initial performance benchmark looked like this:&lt;/p&gt;

&lt;h4 id=&quot;centerpub-only-versus-pubsub-zero-tuning-persistence-13m-messagescenter&quot;&gt;&lt;center&gt;Pub only versus Pub/Sub, zero tuning, persistence, 13M messages&lt;center&gt;&lt;/center&gt;&lt;/center&gt;&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Test&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Pub only&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1276 msgs/sec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Pub / Sub&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8832 msgs/sec&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Pathetic and embarrassing to say the least.  But hey - zero tuning so you can’t really expect much right?  The first question we raised was let’s take a look at your hardware:&lt;/p&gt;

&lt;h4 id=&quot;centertest-broker-vm-specificationcenter&quot;&gt;&lt;center&gt;Test Broker VM Specification&lt;/center&gt;&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Item&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OS&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;RHEL 7.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Architecture&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;amd64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Processors&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Memory&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8GB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JVM&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Oracle 64bit 1.7.0_09&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not too shabby in terms of test machine, so what about storage:&lt;/p&gt;

&lt;h4 id=&quot;centertest-broker-storagecenter&quot;&gt;&lt;center&gt;Test Broker Storage&lt;/center&gt;&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Item&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Type&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;HDS VSP array&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Connectivity&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; Fiber attached, 8Gbp/s HBAs &amp;amp; SAN switches&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;NFS&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;No&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Again, no alarm bells yet in terms of test VM and storage.  My colleague, Christian Posta, who published an amazing post on tuning A-MQ &lt;a href=&quot;http://blog.christianposta.com/activemq/speeding-up-activemq-persistent-messaging-performance-by-25x/&quot;&gt;here&lt;/a&gt;, gave us some hints for checking persistent storage, specifically by running the activemq perf-test benchmarking tool.  This was the output it gave:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;Disk Benchmark:
Benchmarking: /opt/app/jbossamq/csst/data/amq/kahadb/disk-benchmark.dat
Writes:
  1919986 writes of size 4096 written in 10.042 seconds.
  191195.58 writes/second.
  746.8577 megs/second.

Sync Writes:
  24857 writes of size 4096 written in 10.001 seconds.
  2485.4514 writes/second.
  9.708795 megs/second.

Reads:
  8539871 reads of size 4096 read in 10.001 seconds.
  853901.7 writes/second.
  3335.5535 megs/second
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Disk Writes looked fine at 746 megs/sec.  But as Christian mentioned in his post, the item to watch was the sync writes, which in our case were abysmally slow at 9.7 megs/sec.  Christian’s suggestion was to run disk-benchmark again but increase the block size to 4MB (the default block size of Apache ActiveMQ):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;Benchmarking: /opt/app/jbossamq/csst/extras/apache-activemq-5.11.0.redhat-62013/disk-benchmark.dat
Writes:
  1576 writes of size 4194304 written in 10.251 seconds.
  153.7411 writes/second.
  614.9644 megs/second.

Sync Writes:
  927 writes of size 4194304 written in 10.004 seconds.
  92.66293 writes/second.
  370.65173 megs/second.

Reads:
  3858 reads of size 4194304 read in 10.003 seconds.
  385.6843 writes/second.
  1542.7372 megs/second.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time around we saw a massive increase from 9.7 megs/second to 370 megs/second, telling us to be mindful of this when tuning JBoss A-MQ.  We had a smoking gun though: storage.  But how best to proceed?  We decided to momentarily take storage out of the equation and run the tests with zero persistence, using the “memoryPersistenceAdapter” plus publish to queues (and not composite topics).  That way, everything runs in memory and we’re not worrying about disk I/O or storage holding us up.  We tried running the same tests but this time with a 4M message sample.  Unfortunately, the test broker kept bombing out with this ghastly error: &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;java.lang.OutOfMemoryError: GC overhead limit exceeded
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A bit of Googling and we soon found out we can fix this by specifying a different Garbage Collector in the bin/setenv file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;export JAVA_MIN_MEM=6G # Minimum memory for the JVM
export JAVA_MAX_MEM=6G # Maximum memory for the JVM
export KARAF_OPTS=&quot;-XX:+UseConcMarkSweepGC&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While we were at it, we noticed the customer had set the JVM min/max heap size to 8G - the total memory size of the VM which certainly wasn’t helping matters.  So we knocked that down to 6G (both min and max) giving the OS a bit of breathing space (2G of memory).  We ran the tests again and this was the new result:&lt;/p&gt;

&lt;h4 id=&quot;centerpub-only-versus-pubsub-no-persistence-new-memory--gc-settingscenter&quot;&gt;&lt;center&gt;Pub only versus Pub/Sub, No persistence, New memory / GC settings&lt;center&gt;&lt;/center&gt;&lt;/center&gt;&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Test&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Pub only&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;57,743 msgs/sec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pub / Sub&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;34,198 msgs/sec&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Wow! What a MASSIVE difference adjusting the memory, GC and removing storage makes. We’ve opened the flood gates, so now was a good time to add back persistence (kahadb) and re-test.  Instead of going through every modification, here is a summary of tweaks we made to the default persistence store, kahadb (in the activemq.xml file):&lt;/p&gt;

&lt;h3 id=&quot;centerqueues-producer-only-persistence-oncenter&quot;&gt;&lt;center&gt;Queues, Producer Only, Persistence On&lt;/center&gt;&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Enhancement&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Throughput (msg/sec)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;UseConcMarkSweepGC&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,236&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;enableJournalDiskSyncs=”true”&lt;br /&gt;preallocationStrategy=”zeros”&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,424&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;preallocationStrategy=”os_kernel_copy”&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1,456&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;preallocationStrategy=”zeros”&lt;br /&gt;concurrentStoreAndDispatchQueues=”false”&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;6,056&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;enableJournalDiskSyncs=”true”&lt;br /&gt;preallocationStrategy=”zeros”&lt;br /&gt; concurrentStoreAndDispatchQueues=”false” &lt;br /&gt; cleanupInterval=”300000” &lt;br /&gt; checkpointInterval=”50000” &lt;br /&gt; journalMaxWriteBatchSize=”62k” &lt;br /&gt; journalMaxFileLength=”1g” &lt;br /&gt; indexCacheSize=”100000”&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5,688&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;enableJournalDiskSyncs=”true”&lt;br /&gt;preallocationStrategy=”zeros”&lt;br /&gt;concurrentStoreAndDispatchQueues=”false”&lt;br /&gt;skipMetadataUpdate=true&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;7,828&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;enableJournalDiskSyncs=”true”&lt;br /&gt;preallocationStrategy=”zeros”&lt;br /&gt;concurrentStoreAndDispatchQueues=”false”&lt;br /&gt;mKahaDb (10 instances, cold database)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11,936&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;enableJournalDiskSyncs=”true”&lt;br /&gt;preallocationStrategy=”zeros”&lt;br /&gt;concurrentStoreAndDispatchQueues=”false”&lt;br /&gt;mKahaDb (10 instances, hot database)&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,693&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A technique suggested to us by Red Hat Engineering was the use of destination sharding using mKahaDB (or multiple kahadb’s).  The idea is to segregate topic / queue destinations into their own kahadb instance make access quicker, which obviously gave us some performance gain.  &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-XML&quot;&gt; &amp;lt;persistenceAdapter&amp;gt;
	&amp;lt;mKahaDB directory=&quot;${data}/kahadb&quot;&amp;gt;
          &amp;lt;filteredPersistenceAdapters&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.1&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.2&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.3&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.4&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.5&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.6&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.7&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.8&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.9&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
            &amp;lt;filteredKahaDB queue=&quot;amqThroughPutTest.10&quot;&amp;gt;
        &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
        &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
       &amp;lt;filteredKahaDB&amp;gt;
          &amp;lt;persistenceAdapter&amp;gt;
            &amp;lt;kahaDB enableJournalDiskSyncs=&quot;true&quot; preallocationStrategy=&quot;zeros&quot; concurrentStoreAndDispatchQueues=&quot;false&quot;/&amp;gt;
          &amp;lt;/persistenceAdapter&amp;gt;
       &amp;lt;/filteredKahaDB&amp;gt;
    &amp;lt;/filteredPersistenceAdapters&amp;gt;
   &amp;lt;/mKahaDB&amp;gt;
 &amp;lt;/persistenceAdapter&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point the customer was getting pretty excited at seeing a 10x performance gain, but their expectation was 17,000-19,000 msgs/sec.  They asked whether we had anymore tricks up our sleeves, which we did of course.  I told the customer to add the following line to their etc/system.properties file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;org.apache.activemq.kahaDB.files.skipMetadataUpdate=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On some operating systems, you can obtain better performance by enabling skipMetadataUpdate to call the fdatasync() system call instead of the fsync() system call (the default), when writing to a file. The difference between these system calls is that fdatasync() updates only the file data, whereas fsync() updates both the file data and the file metadata (for example, the access time).  Keep in mind that this setting does not work on all Operating Systems or JVM’s, thus it’s not a default setting.&lt;/p&gt;

&lt;p&gt;The customer retested this configuration using mKahadb destination sharding but reverting back to composite topics instead of queues.  This was the final result:&lt;/p&gt;

&lt;h4 id=&quot;centerpub-only-versus-pubsub-composite-topics-tuned-4m-messagescenter&quot;&gt;&lt;center&gt;Pub only versus Pub/Sub, Composite Topics, Tuned, 4M messages&lt;center&gt;&lt;/center&gt;&lt;/center&gt;&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Test&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Pub only&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12,197 msgs/sec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pub / Sub&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16,783 msgs/sec&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Not quite “high teens” but close enough.  After further analysis by Red Hat Engineering, we noticed that there were fsync bottlenecks occurring which could be optimized through a code change, so a fix was released to the community version of Apache ActiveMQ &lt;a href=&quot;https://issues.apache.org/jira/browse/AMQ-6164&quot;&gt;here&lt;/a&gt;.  We’re all eagerly waiting for this fix to be included in a future release of JBoss A-MQ, so stay tuned to see whether we can finally hit our performance target of “high teens” once and for all.&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://sigreen.github.io/2016/02/10/amq-tuning.html</link>
        <guid isPermaLink="true">http://sigreen.github.io/2016/02/10/amq-tuning.html</guid>
        
        
      </item>
    
      <item>
        <title>Creating a two-way SSL SOAP client using Apache Camel CXF</title>
        <description>&lt;p&gt;Two-way SSL is something that has always been a little tricky to configure and manage.  Creating a truststore and keystore and working out which certificates go where confuses things. And by adding a SOAP layer on top and battling with CXF further complicates the task.  I recently embarked on this activity for a customer and was shocked to learn how badly documented this was on the web.  It seems few people have attempted this so I thought it was my time to contribute a little and create a sample project.&lt;/p&gt;

&lt;p&gt;My sample project is &lt;a href=&quot;https://github.com/sigreen/camel-cxf-soap-client&quot;&gt;here&lt;/a&gt;.  Key points I learnt were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s better to develop with CXF system logging switched on so you can see your request / reply SOAP messages.  In your camel_context.xml, just set the following:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;&amp;lt;!-- The interceptors bean definitions - used for logging SOAP requests. --&amp;gt;
&amp;lt;!-- They can be removed, when no logging is needed --&amp;gt;
&amp;lt;bean id=&quot;abstractLoggingInterceptor&quot; abstract=&quot;true&quot;&amp;gt;
	&amp;lt;property name=&quot;prettyLogging&quot; value=&quot;true&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&quot;loggingInInterceptor&quot; class=&quot;org.apache.cxf.interceptor.LoggingInInterceptor&quot; parent=&quot;abstractLoggingInterceptor&quot; /&amp;gt;
&amp;lt;bean id=&quot;loggingOutInterceptor&quot; class=&quot;org.apache.cxf.interceptor.LoggingOutInterceptor&quot; parent=&quot;abstractLoggingInterceptor&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;SOAP UI is your friend.  Use the Mock test service to act as a sample SOAP server while you develop.&lt;/li&gt;
  &lt;li&gt;I prefer developing “contract first” i.e. using a WSDL contract clearly defining each service request/reply.  I used the handy wsdl2java cxf-codegen Maven plugin to generate my objects from the WSDL contract&lt;/li&gt;
  &lt;li&gt;Namespaces are confusing in CXF.  Rather than set the namespace on the CXF endpoint element, I found it clearer to embed the namespace name into the port / service name properties e.g. &lt;code&gt;{http\://www.webserviceX.NET/}CurrencyConvertorSoap&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s it.  I was able to run the sample project within a local Camel Context, and once I was happy with the result, use the project as a template for developing something more specific for my customer.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Nov 2015 00:00:00 -0500</pubDate>
        <link>http://sigreen.github.io/2015/11/10/soap-cxf.html</link>
        <guid isPermaLink="true">http://sigreen.github.io/2015/11/10/soap-cxf.html</guid>
        
        
      </item>
    
      <item>
        <title>Managed File Transfer (MFT) the RESTFul way</title>
        <description>&lt;p&gt;Managed File Transfer (MFT) is something proprietary Enterprise Application Integration (EAI) suites have been tackling for years. Instead of the usual data 
transformation and business process automation tasks, these applications have done an amazing job at transporting and routing large files between you and your 
trading partners. The typical use case I’m talking about would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I’m a bank that needs to receive check images, ACH files, payroll and securely receive EDI AP files sent by my corporate customers&lt;/li&gt;
  &lt;li&gt;My file size ranges from 100K to 100MB&lt;/li&gt;
  &lt;li&gt;Typical daily volumes are 1000 - 100,000 files&lt;/li&gt;
  &lt;li&gt;Files must be exchanged over the internet using SFTP, FTPS or HTTPS&lt;/li&gt;
  &lt;li&gt;I want a simple, consistent interface that any trading partner can use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sounds simple right? WRONG!! We also need to consider:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PKI. Issuing and revoking certificates is something managed by an external system but must integrate with your MFT solution&lt;/li&gt;
  &lt;li&gt;Authorization. Typically an LDAP server is used to manage trading partner account credentials&lt;/li&gt;
  &lt;li&gt;Integrity. The integrity of the file needs to be guaranteed from point-to-point&lt;/li&gt;
  &lt;li&gt;Virus scanning. It’s inevitable hackers will try to upload viruses to your new MFT solution and infiltrate your beloved trusted zone.&lt;/li&gt;
  &lt;li&gt;Routing. Files need to be routed to their end destination using either filename-based, content-based routing or a combination of both&lt;/li&gt;
  &lt;li&gt;Secure Proxy. It’s important to prevent a direct connection into systems installed in your trusted zone. Therefore, a session-break mechanism needs to be considered in your solution.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is what the typical MFT architecture looks like using your legacy EAI suite:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sigreen/sigreen.github.io/master/images/eai_secureProxy.png&quot; alt=&quot;EAI MFT Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is NOTHING wrong with the above architecture. It is proven technology which has endured 20 years of exchanging large files without issue. So what happens if we
want a technology refresh, remove our proprietary software and use something more open-source like Fuse/Fabric/A-MQ? Well, we don’t really need to change all that much
in terms of architecture. In fact, the architecture looks surprisingly similar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sigreen/sigreen.github.io/master/images/fuse_secureProxy.png&quot; alt=&quot;Fuse MFT Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What I did was:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the DMZ, swap the Secure Proxy for an instance of Fuse. This instance can take care of receiving files over FTPS / SFTP / HTTPS whilst maintaining a session break
from the Trusted Zone.&lt;/li&gt;
  &lt;li&gt;In the Trusted Zone, replace the EAI suite with an instance of Fuse and A-MQ broker. Fuse can take care of the file routing to backend systems, plus additional user
authentication if required. The A-MQ broker is used to safestore the file received from the DMZ once it’s passed all the safety checks conducted by the outer layer Fuse
instance (integrity, authorization, virus checking etc).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what about the RESTFul bit? Our friends in the retail industry have been using specifications like AS2 and AS3 to securely transfer files over the internet for decades.
Although these specs are secure and provide a valuable mechanism for (a)synchronous file exchange (with receipts), they are often overly complex and difficult for 
Trading Partners to implement on the client side. A better technique I’ve used is to exchange RESTFul messages over HTTPS. The raw payload body is inserted into the 
HTTP body, while metadata ends up in the HTTP headers (like digital signature, sender, receiver, destination etc).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Text&quot;&gt;POST /cxf/file HTTP/1.1
Host: localhost
Connection: keep-alive
fileName: README.md
digitalSignature: 66eU13rZivthyv0lfydneg==
destination: ACH
Content-Type: text/plain
Content-Length: 2026
Host: localhost:8183
User-Agent: Apache-HttpClient/4.2.6 (java 1.5)

My body goes here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To ensure file integrity, I exchange a shared secret with my Trading Partners. This secret is hashed together with the HTTP body using the HMAC-SHA256 algorithm, then base64 encoded to give us a 16-bit digital signature. That way, if someone messes with the file between point A and B, we’ll know about it.&lt;/p&gt;

&lt;p&gt;Authorization, authentication and encryption can be taken care of securely using PKI and SSL provided you have a PKI in place to manage this.&lt;/p&gt;

&lt;p&gt;Now for the fun part! I’ve created a demo project for you to try which demonstrates the exchange of large files using this technique. Check it out &lt;a href=&quot;https://github.com/sigreen/rest-mft-osgi&quot;&gt;here&lt;/a&gt; and 
let me know what you think.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Aug 2015 00:00:00 -0400</pubDate>
        <link>http://sigreen.github.io/2015/08/20/rest-mft.html</link>
        <guid isPermaLink="true">http://sigreen.github.io/2015/08/20/rest-mft.html</guid>
        
        
      </item>
    
  </channel>
</rss>
